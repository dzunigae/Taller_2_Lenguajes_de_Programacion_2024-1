## Zona de Declaraciones

entero numero_1 = 11;
real numero_x = (5.0/7.0) + (11.78+67.099) * 9.99;
simbolo simbolo_x = 'p';
arreglo arreglo_x = [[4,5], 7.0, [9,0,0.809,[11,11.0]]]; 
arreglo arreglo_y[4] = []; 
racha racha_x = "uuuuu";
modelo modelo_x{
    alfa: 4.7,
    beta: [5.4, -9.2],
    tau: [-7.4, 1.2, 0.58],
    delta[
        [1][1]: [15.9,-4.0,66.1],
        [1][2]: [-6.1,3.9],
        [1][3]: [4.2,-1.3,12.4,5.8],
        [2][1]: [23.8],
        [2][2]: [4.5,3.6,-0.5],
        [2][3]: [2.2,-5.6]
    ]
};
alfabeto alfabeto_x{'d','f','r','g','t','y','u'};
alfabeto alfabeto_y{};

## Declaraciones explicitas del modelo

# Forma 1

modelo modelo_y{};
modelo_y.beta[7];
modelo_y.tau[7];
modelo_y.delta[7][7];

## Forma 2

modelo_y.beta[7].tau[7].delta[7][7];

## Zona de funciones

funcion nada mostrar_valor(entero x){
    mostrar(x);
    retornar nada;
}

funcion real if(real x){
    si((x == 9.0 o x <= 3.1*8.9) y x >= 0.0){
        retornar x*x;
    }sino{
        retornar 0.0;
    }
}

funcion arreglo switch(arreglo x){
    cadena string = tipo(x[0]);
    caso(string){
        string == "entero":
            retornar [string,string+1];
        string == "real":
            retornar [0.0,0.0];
        string == "arreglo":
            retornar string;
    }
}

funcion arreglo ciclos(arreglo x, arreglo yy){
    entero i = 0;

    ## Forma 1
    repita{
        yy[i] = x[i];
        i = i + 1;
    }mientras(i < tamano(x))

    i = 0;

    ## Forma 2
    mientras(i < tamano(x)){
        yy[i] = x[i];
        i = i + 1;
    }

    ## Forma 3
    para(entero i = 0 hasta i == tamano(x)){
        yy[i] = x[i];
    }

    retornar yy;
}

funcion cadena alfabeto_y_valores(arreglo valores, alfabeto relacionado){
    para(entero i = 0 hasta i == tamano(valores)){
        si(valores >= 0.0 y valores < 5.0){
            retornar relacionado[0];
        }sino si(valores >= 5.0 y valores < 7.0){
            retornar relacionado[1];
        }sino si(valores >= 7.0 y valores < 9.0){
            retornar relacionado[2];
        }sino si(valores >= 9.0 y valores < 10.0){
            retornar relacionado[3];
        }
    }
}

## Zona principal

inicio_main

    ## Reasignación de variables del modelo

    modelo_y.alfa = 9.0;
    modelo_y.beta = [1.0,2.0,3.0,4.0,5.0,6.0,7.0];
    modelo_y.tau = [1.0,2.0,3.0,4.0,5.0,6.0,7.0];
    modelo_y.delta = [
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0],
        [1.0,2.0,3.0,4.0,5.0,6.0,7.0]
    ];

    ## Para añadir algo al alfabeto vacío se usa .ADD

    alfabeto_y.add('a');
    alfabeto_y.add('b');
    alfabeto_y.add('c');
    alfabeto_y.add('d');
    alfabeto_y.add('e');
    alfabeto_y.add('f');
    alfabeto_y.add('g');
    alfabeto_y.add('h');
    alfabeto_y.add('i');

    ## Ejemplos de notación científica

    mostrar(3.14);
    mostrar(2e10);
    mostrar(2.5E-4);
    mostrar(1E4);
    mostrar(-5e+3);

    ## Ejemplo llamado de función

    real real_1 = if(numero_x);

    ## Proceso de multicotomización
    cadena cadena_multicotomizada = multicotomizacion(valores,alfabeto_relacionado,alfabeto_y_valores);

    ## Función contadora
    ## Recibe la cadena y la posición del símbolo hasta el cual hacer el proceso.
    entero a = numero_rachas_hasta_dato(cosa,15); ## Creo que es lo mismo que la función contadora.

    ## Función que da el número de datos del modelo.
    entero b = datos_modelo(modelo_x);

        ## Función especial que da el total de datos del bloque especificado.
    ## Recibe, además del modelo, el bloque específico, todas las funciones con funcionamiento similar son de esta forma.
    entero c = datos_bloque(modelo_x,2);

    ## Función especial que da el total de datos del tratamiento.
    entero d = datos_tratamiento(modelo_x,2);

    ## Función especial que da el conjunto de todos los datos del modelo de dos vías de clasificación.
    arreglo e = conjunto_datos(modelo_x);

    ## Función especial que da el conjunto de todos los datos del bloque.
    arreglo f = conjunto_datos_bloque(modelo_x,2);

    ## Función especial que da el conjunto de todos los datos del tratamiento.
    arreglo g = conjunto_datos_tratamiento(modelo_x,2);

    ## Función especial que da el número de rachas en la celda especificada.
    ## Se recibe la coordenada completa.
    entero h = rachas_celda(modelo_x,2,2);

    ## Función especial que da el promedio de rachas en la celda especificada.
    real i = promedio_rachas_celda(modelo_x,2,2);

    ## Función especial que da la suma del número de rachas en el bloque especificado.
    entero j = rachas_bloque(modelo_x,2);

    ## Función especial que da la suma del número de rachas en el tratamiento especificado.
    entero k = rachas_tratamiento(modelo_x,2);

    ## Función especial que da el promedio de rachas en el bloque especificado.
    real l = promedio_rachas_bloque(modelo_x,2);

    ## Función especial que da el promedio de rachas en el tratamiento especificado.
    real m = promedio_rachas_tratamiento(modelo_x,2);

    ## Función especial que da la suma del número de rachas de todo el modelo.
    entero n = rachas_modelo(modelo_x);

    ## Función especial que da el promedio del número de rachas de todo el modelo.
    real oo = promedio_rachas_modelo(modelo_x);
fin_main